{"version":3,"sources":["images/logo-V2.png","images/logo-solo.png","components/Header/Navigation.jsx","components/Header/header-component.jsx","components/Menu/menu-component.jsx","components/BackgroundOverlay/background-overlay-component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","props","className","id","href","Header","src","logo","alt","logoSolo","Menu","handleClick","menuToggle","console","log","type","onClick","e","window","innerWidth","animationClass","BackgroundOverlay","App","useState","setMenuToggle","preventDefault","role","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,+PCwB5BC,G,YArBI,SAACC,GAClB,OACE,yBAAKC,UAAU,cACb,wBAAIC,GAAG,eAAeD,UAAU,IAC9B,wBAAIA,UAAU,aACZ,uBAAGE,KAAK,KAAR,WAEF,wBAAIF,UAAU,cACZ,uBAAGE,KAAK,KAAR,eAEF,wBAAIF,UAAU,cACZ,uBAAGE,KAAK,KAAR,WAEF,wBAAIF,UAAU,cACZ,uBAAGE,KAAK,KAAR,mBCMKC,EAhBA,SAACJ,GACd,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,OAAOI,IAAKC,IAAMC,IAAI,oBAEvC,yBAAKN,UAAU,qBACb,yBAAKA,UAAU,YAAYI,IAAKG,IAAUD,IAAI,qBAGlD,kBAAC,EAAD,QCiCSE,G,MAhDF,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAsB3B,OADAC,QAAQC,MAEN,yBAAKX,GAAG,eAAeD,UAAWU,EAAa,SAAW,IACxD,4BACEV,UACEU,EACI,4DACA,wCAENG,KAAK,SACLC,QAAS,SAACC,GAAD,OAAON,EAAYM,KAE5B,0BAAMf,UAAU,kBACd,0BAAMA,UAAU,sBAGpB,yBAAKC,GAAG,OAAOD,UApCI,SAACU,GACtBC,QAAQC,IAAII,OAAOC,YAgBnB,OAbIP,EACEM,OAAOC,YAAc,IACP,uBAEA,yBAGdD,OAAOC,YAAc,IACP,wBAEA,0BAsBQC,CAAeR,IACvC,yBAAKV,UAAU,+BACb,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,sCAAf,WC/BGmB,EAVW,SAAC,GAAiC,IAA/BT,EAA8B,EAA9BA,WAA8B,EAAlBD,YAKvC,OACE,yBAAKR,GAAG,qBAAqBD,UALR,SAACU,GACtB,OAAOA,EAAa,GAAK,UAIeQ,CAAeR,MCsB5CU,MAtBf,WAAgB,IAAD,EACuBC,oBAAS,GADhC,mBACNX,EADM,KACMY,EADN,KAGPb,EAAc,SAACM,GACnBA,EAAEQ,iBACWD,GAAbZ,GACAC,QAAQC,IAAIF,IAGd,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMU,WAAYA,EAAYD,YAAaA,IAC3C,kBAAC,EAAD,CAAmBC,WAAYA,EAAYD,YAAaA,IAExD,yBAAKT,UAAU,0BAA0BwB,KAAK,YAA9C,mBCXcC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.e38c9969.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-V2.e6e22003.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-solo.b995a899.png\";","import React from \"react\";\r\nimport \"./Navigation.scss\";\r\n\r\nconst Navigation = (props) => {\r\n  return (\r\n    <nav className=\"navigation\">\r\n      <ul id=\"menu-top-nav\" className=\"\">\r\n        <li className=\"menu-item\">\r\n          <a href=\"#\">Sermon</a>\r\n        </li>\r\n        <li className=\"menu-item \">\r\n          <a href=\"#\">Who we are</a>\r\n        </li>\r\n        <li className=\"menu-item \">\r\n          <a href=\"#\">Events</a>\r\n        </li>\r\n        <li className=\"menu-item \">\r\n          <a href=\"#\">Ministries</a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport logo from \"../../images/logo-V2.png\";\r\nimport logoSolo from \"../../images/logo-solo.png\";\r\nimport \"./header-component.scss\";\r\n\r\nimport Navigation from \"./Navigation.jsx\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"banner\">\r\n        <div className=\"churchLogo\">\r\n          <img className=\"logo\" src={logo} alt=\"Sanctuary Logo\" />\r\n        </div>\r\n        <div className=\"churchLogo-mobile\">\r\n          <img className=\"logo-solo\" src={logoSolo} alt=\"Sanctuary Logo\" />\r\n        </div>\r\n      </div>\r\n      <Navigation />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./menu-component.scss\";\r\n\r\nconst Menu = ({ handleClick, menuToggle }) => {\r\n  const animationClass = (menuToggle) => {\r\n    console.log(window.innerWidth);\r\n\r\n    let animatedClass = \"\";\r\n    if (menuToggle) {\r\n      if (window.innerWidth <= 600) {\r\n        animatedClass = \"slide-in-blurred-top\";\r\n      } else {\r\n        animatedClass = \"slide-in-blurred-right\";\r\n      }\r\n    } else {\r\n      if (window.innerWidth <= 600) {\r\n        animatedClass = \"slide-out-blurred-top\";\r\n      } else {\r\n        animatedClass = \"slide-out-blurred-right\";\r\n      }\r\n    }\r\n    return animatedClass;\r\n  };\r\n\r\n  console.log();\r\n  return (\r\n    <div id=\"menu-wrapper\" className={menuToggle ? \"opened\" : \"\"}>\r\n      <button\r\n        className={\r\n          menuToggle\r\n            ? \"hamburger hamburger--squeeze trigger is-active close-menu\"\r\n            : \"hamburger hamburger--squeeze trigger \"\r\n        } //is-active close-menu\r\n        type=\"button\"\r\n        onClick={(e) => handleClick(e)}\r\n      >\r\n        <span className=\"hamburger-box \">\r\n          <span className=\"hamburger-inner\"></span>\r\n        </span>\r\n      </button>\r\n      <div id=\"menu\" className={animationClass(menuToggle)}>\r\n        <div className=\"container-fluid full-height\">\r\n          <div className=\"row menu-header-wrapper\">\r\n            <div className=\"col-12 search col-sm-10 order-sm-1\">s</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\n\r\nconst BackgroundOverlay = ({ menuToggle, handleClick }) => {\r\n  const animationClass = (menuToggle) => {\r\n    return menuToggle ? \"\" : \"fadeOut\";\r\n  };\r\n\r\n  return (\r\n    <div id=\"background-overlay\" className={animationClass(menuToggle)}></div>\r\n  );\r\n};\r\n\r\nexport default BackgroundOverlay;\r\n","import React, { useState } from \"react\";\n\nimport \"./stylesheets/defaults.scss\";\n\nimport Header from \"./components/Header/header-component.jsx\";\nimport Menu from \"./components/Menu/menu-component.jsx\";\nimport BackgroundOverlay from \"./components/BackgroundOverlay/background-overlay-component.jsx\";\n\nfunction App() {\n  const [menuToggle, setMenuToggle] = useState(false);\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    menuToggle ? setMenuToggle(false) : setMenuToggle(true);\n    console.log(menuToggle);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Menu menuToggle={menuToggle} handleClick={handleClick} />\n      <BackgroundOverlay menuToggle={menuToggle} handleClick={handleClick} />\n\n      <div className=\"wrap flex-grow-noshrink\" role=\"document\">\n        Contents here\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}